/**
 * Settings – used with preprocessors and contain font, colors definitions, etc.
 */
// Example with a "all.scss" file as a wrapper with our settings, since they don't actually output css.
// Is optional, you can define individual settings here if you want to.
// @import "1-settings/all";

/**
 * Tools – globally used mixins and functions. It’s important not to output any CSS in the first 2 layers.
 */
// Example for a "all.scss" file, as a wrapper for our tools, since they don't actually output css.
// Is optional, you can define individual settings here if you want to.
// @import "2-tools/all";

/**
 * Generic – reset and/or normalize styles, box-sizing definition, etc. This is the first layer which generates actual CSS.
 */
// Example for Reset.css
// @import "3-generic/reset";

/**
 * Elements – styling for bare HTML elements (like H1, A, etc.). These come with default styling from the browser so we can redefine them here.
 */
// Example: The body tag and a tags
// @import "4-elements/body";
// @import "4-elements/links";

/**
 * Objects – class-based selectors which define undecorated design patterns, for example media object known from OOCSS
 */
// Example for .o-container that wraps pages
// @import "5-objects/container";

/**
 * Components – specific UI components. This is where majority of our work takes place and our UI components are often composed of Objects and Components
 */
// Example for .c-image-slider component in your platform
// @import "6-components/image-slider";

/**
 * Utilities – utilities and helper classes with ability to override anything which goes before in the triangle, eg. hide helper class
 */
// Example for .u-display-none/.u-display-block, etc.
// @import "7-utilities/display";
